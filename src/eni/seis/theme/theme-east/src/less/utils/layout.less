.utils {

  .clear,
  .clearfix {
    &:before,
    &:after {
      content: "";
      display: table;
    }
    &:after {
      clear: both;
    }
  }

  .center,
  .center-block {
    margin-left: auto;
    margin-right: auto;
  }

  .center-xy(@position: relative) {
    position: @position;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .center-x(@position: relative) {
    position: @position;
    left: 50%;
    transform: translateX(-50%);
  }

  .center-y(@position: relative) {
    position: @position;
    top: 50%;
    transform: translateY(-50%);
  }

  .row(@gutter) when (length(@gutter) = 1){
    margin-left:   (-@gutter / 2);
    margin-right:  (-@gutter / 2);
  }

  .row(@gutter) when (length(@gutter) > 1) {
    @gutter-v: extract(@gutter, 1);
    @gutter-h: extract(@gutter, 2);
    
    margin-top:    (-@gutter-v / 2);
    margin-bottom: (-@gutter-v / 2);
    margin-left:   (-@gutter-h / 2);
    margin-right:  (-@gutter-h / 2);
  }

  .column(@gutter) when (length(@gutter) = 1) {
    float: left;
    box-sizing: border-box;
    position:relative;

    padding-left:   (@gutter / 2);
    padding-right:  (@gutter / 2);
  }

  .column(@gutter) when (length(@gutter) > 1) {
    @gutter-v: extract(@gutter, 1);
    @gutter-h: extract(@gutter, 2);

    float: left;
    box-sizing: border-box;
    position:relative;

    padding-top:    (@gutter-v / 2);
    padding-bottom: (@gutter-v / 2);
    padding-left:   (@gutter-h / 2);
    padding-right:  (@gutter-h / 2);
  }

  .args-col(@col) when (length(@col) = 1) {
    @i:     @col;
    @total: 12;
  }

  .args-col(@col) when (length(@col) > 1) {
    @i:     extract(@col, 1);
    @total: extract(@col, 2);
  }

  .col(@col, @type: width) when (@type = width) {
    .args-col(@col);
    width: percentage(@i / @total);
  }

  .col(@col, @type: width) when (@type = push) {
    .args-col(@col);
    left: percentage(@i / @total);
  }

  .col(@col, @type: width) when (@type = pull) {
    .args-col(@col);
    right: percentage(@i / @total);
  }

  .col(@col, @type: width) when (@type = offset) {
    .args-col(@col);
    margin-left: percentage(@i / @total);
  }


  .make-columns-fromList(@list, @total, @type: width, @i: 1)
                   when (@i =< length(@list)) {
    
    @unit: extract(@list, @i);

    &@{unit} {
      .col(@unit @total, @type);
    }

    .make-columns-fromList(@list, @total, @type, @i + 1);
  }

  .make-columns-fromStep(@step, @total, @type: width, @i: 1)
                   when (@i * @step =< @total) {
    
    @unit: @step * @i;
   
    &@{unit} {
      .col(@unit @total, @type);
    }
   
    .make-columns-fromStep(@step, @total, @type, @i + 1);
  }

  .make-columns(@col, @total, @type: width, @i: 1) when 
               (length(@col) > 1) {
    .make-columns-fromList(@col, @total, @type);
  }

  .make-columns(@col, @total, @type: width, @i: 1) when 
               (length(@col) = 1) {
    .make-columns-fromStep(@col, @total, @type);
  }

}
